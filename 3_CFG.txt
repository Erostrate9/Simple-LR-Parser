P : 
PROGRAM -> DEFINE_FUNCTION
DEFINE_FUNCTION -> DEFINE_FUNCTION DEFINE_FUNCTION
DEFINE_FUNCTION -> VARIABLE_TYPE id ( ) { FUNCTION_BLOCK }
DEFINE_FUNCTION -> VARIABLE_TYPE id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK }
INCOMING_PARAMETER -> VARIABLE_TYPE id
INCOMING_PARAMETER -> VARIABLE_TYPE id , INCOMING_PARAMETER
FUNCTION_BLOCK -> FUNCTION_BLOCK FUNCTION_BLOCK
FUNCTION_BLOCK -> VARIABLE_TYPE id ;
FUNCTION_BLOCK -> id = ARITHMETIC_EXPRESSION ;
FUNCTION_BLOCK -> while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK }
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK }
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK }
FUNCTION_BLOCK -> return ;
FUNCTION_BLOCK -> return ARITHMETIC_EXPRESSION ;
VARIABLE_TYPE -> int
VARIABLE_TYPE -> float
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION
ARITHMETIC_EXPRESSION -> - ARITHMETIC_EXPRESSION
ARITHMETIC_EXPRESSION -> ( ARITHMETIC_EXPRESSION )
ARITHMETIC_EXPRESSION -> id
ARITHMETIC_EXPRESSION -> digit
BOOL_EXPRESSION -> ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION
BOOL_EXPRESSION -> BOOL_EXPRESSION && BOOL_EXPRESSION
BOOL_EXPRESSION -> BOOL_EXPRESSION || BOOL_EXPRESSION
BOOL_EXPRESSION -> ! BOOL_EXPRESSION
BOOL_EXPRESSION -> ( BOOL_EXPRESSION )
BOOL_EXPRESSION -> true
BOOL_EXPRESSION -> false
COMPARISON_OPERATOR -> <
COMPARISON_OPERATOR -> >
COMPARISON_OPERATOR -> <=
COMPARISON_OPERATOR -> >=
COMPARISON_OPERATOR -> ==
COMPARISON_OPERATOR -> !=
ARITHMETIC_OPERATOR -> +
ARITHMETIC_OPERATOR -> -
ARITHMETIC_OPERATOR -> *
ARITHMETIC_OPERATOR -> /

V : PROGRAM  DEFINE_FUNCTION  INCOMING_PARAMETER  FUNCTION_BLOCK  VARIABLE_TYPE  ARITHMETIC_EXPRESSION  BOOL_EXPRESSION  COMPARISON_OPERATOR  ARITHMETIC_OPERATOR  
T : id  (  )  {  }  ,  ;  =  while  if  else  return  int  float  -  digit  &&  ||  !  true  false  <  >  <=  >=  ==  !=  +  *  /  
S : PROGRAM
