
State stack: [0]
Value stack: ['$']
Input buffer: float id ( float id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S5
action: Shift state: 5，input character: float

State stack: [0, 5]
Value stack: ['$', 'float']
Input buffer: id ( float id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r16
action: Reduce with No.16 production: ['float'] -> VARIABLE_TYPE, push state 3 into state stack

State stack: [0, 3]
Value stack: ['$', 'VARIABLE_TYPE']
Input buffer: id ( float id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S7
action: Shift state: 7，input character: id

State stack: [0, 3, 7]
Value stack: ['$', 'VARIABLE_TYPE', 'id']
Input buffer: ( float id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S8
action: Shift state: 8，input character: (

State stack: [0, 3, 7, 8]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(']
Input buffer: float id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S5
action: Shift state: 5，input character: float

State stack: [0, 3, 7, 8, 5]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'float']
Input buffer: id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r16
action: Reduce with No.16 production: ['float'] -> VARIABLE_TYPE, push state 10 into state stack

State stack: [0, 3, 7, 8, 10]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE']
Input buffer: id , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S13
action: Shift state: 13，input character: id

State stack: [0, 3, 7, 8, 10, 13]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE', 'id']
Input buffer: , float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S16
action: Shift state: 16，input character: ,

State stack: [0, 3, 7, 8, 10, 13, 16]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE', 'id', ',']
Input buffer: float id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S5
action: Shift state: 5，input character: float

State stack: [0, 3, 7, 8, 10, 13, 16, 5]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE', 'id', ',', 'float']
Input buffer: id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r16
action: Reduce with No.16 production: ['float'] -> VARIABLE_TYPE, push state 10 into state stack

State stack: [0, 3, 7, 8, 10, 13, 16, 10]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE', 'id', ',', 'VARIABLE_TYPE']
Input buffer: id ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S13
action: Shift state: 13，input character: id

State stack: [0, 3, 7, 8, 10, 13, 16, 10, 13]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE', 'id', ',', 'VARIABLE_TYPE', 'id']
Input buffer: ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r5
action: Reduce with No.5 production: ['VARIABLE_TYPE', 'id'] -> INCOMING_PARAMETER, push state 24 into state stack

State stack: [0, 3, 7, 8, 10, 13, 16, 24]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'VARIABLE_TYPE', 'id', ',', 'INCOMING_PARAMETER']
Input buffer: ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r6
action: Reduce with No.6 production: ['VARIABLE_TYPE', 'id', ',', 'INCOMING_PARAMETER'] -> INCOMING_PARAMETER, push state 9 into state stack

State stack: [0, 3, 7, 8, 9]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER']
Input buffer: ) { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S12
action: Shift state: 12，input character: )

State stack: [0, 3, 7, 8, 9, 12]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')']
Input buffer: { if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S15
action: Shift state: 15，input character: {

State stack: [0, 3, 7, 8, 9, 12, 15]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{']
Input buffer: if ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S21
action: Shift state: 21，input character: if

State stack: [0, 3, 7, 8, 9, 12, 15, 21]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if']
Input buffer: ( id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S30
action: Shift state: 30，input character: (

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(']
Input buffer: id < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 32]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'id']
Input buffer: < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 40 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 40]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'ARITHMETIC_EXPRESSION']
Input buffer: < id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S57
action: Shift state: 57，input character: <

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 40, 57]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'ARITHMETIC_EXPRESSION', '<']
Input buffer: id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r29
action: Reduce with No.29 production: ['<'] -> COMPARISON_OPERATOR, push state 56 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 40, 56]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR']
Input buffer: id ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 40, 56, 32]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR', 'id']
Input buffer: ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 72 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 40, 56, 72]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r22
action: Reduce with No.22 production: ['ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> BOOL_EXPRESSION, push state 46 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION']
Input buffer: ) { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S69
action: Shift state: 69，input character: )

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')']
Input buffer: { return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S77
action: Shift state: 77，input character: {

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{']
Input buffer: return id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S22
action: Shift state: 22，input character: return

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 22]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'return']
Input buffer: id ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 22, 32]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'return', 'id']
Input buffer: ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 31 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 22, 31]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'return', 'ARITHMETIC_EXPRESSION']
Input buffer: ; } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S48
action: Shift state: 48，input character: ;

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 22, 31, 48]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'return', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r14
action: Reduce with No.14 production: ['return', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 79 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK']
Input buffer: } else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S81
action: Shift state: 81，input character: }

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}']
Input buffer: else { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S82
action: Shift state: 82，input character: else

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else']
Input buffer: { return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S83
action: Shift state: 83，input character: {

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{']
Input buffer: return id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S22
action: Shift state: 22，input character: return

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83, 22]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'return']
Input buffer: id ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83, 22, 32]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'return', 'id']
Input buffer: ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 31 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83, 22, 31]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'return', 'ARITHMETIC_EXPRESSION']
Input buffer: ; } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S48
action: Shift state: 48，input character: ;

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83, 22, 31, 48]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'return', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r14
action: Reduce with No.14 production: ['return', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 84 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83, 84]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'FUNCTION_BLOCK']
Input buffer: } } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S85
action: Shift state: 85，input character: }

State stack: [0, 3, 7, 8, 9, 12, 15, 21, 30, 46, 69, 77, 79, 81, 82, 83, 84, 85]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'FUNCTION_BLOCK', '}']
Input buffer: } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r12
action: Reduce with No.12 production: ['if', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}', 'else', '{', 'FUNCTION_BLOCK', '}'] -> FUNCTION_BLOCK, push state 23 into state stack

State stack: [0, 3, 7, 8, 9, 12, 15, 23]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'FUNCTION_BLOCK']
Input buffer: } int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S37
action: Shift state: 37，input character: }

State stack: [0, 3, 7, 8, 9, 12, 15, 23, 37]
Value stack: ['$', 'VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'FUNCTION_BLOCK', '}']
Input buffer: int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r4
action: Reduce with No.4 production: ['VARIABLE_TYPE', 'id', '(', 'INCOMING_PARAMETER', ')', '{', 'FUNCTION_BLOCK', '}'] -> DEFINE_FUNCTION, push state 2 into state stack

State stack: [0, 2]
Value stack: ['$', 'DEFINE_FUNCTION']
Input buffer: int id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S4
action: Shift state: 4，input character: int

State stack: [0, 2, 4]
Value stack: ['$', 'DEFINE_FUNCTION', 'int']
Input buffer: id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r15
action: Reduce with No.15 production: ['int'] -> VARIABLE_TYPE, push state 3 into state stack

State stack: [0, 2, 3]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE']
Input buffer: id ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S7
action: Shift state: 7，input character: id

State stack: [0, 2, 3, 7]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id']
Input buffer: ( ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S8
action: Shift state: 8，input character: (

State stack: [0, 2, 3, 7, 8]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(']
Input buffer: ) { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S11
action: Shift state: 11，input character: )

State stack: [0, 2, 3, 7, 8, 11]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')']
Input buffer: { int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S14
action: Shift state: 14，input character: {

State stack: [0, 2, 3, 7, 8, 11, 14]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{']
Input buffer: int id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S4
action: Shift state: 4，input character: int

State stack: [0, 2, 3, 7, 8, 11, 14, 4]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'int']
Input buffer: id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r15
action: Reduce with No.15 production: ['int'] -> VARIABLE_TYPE, push state 18 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 18]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'VARIABLE_TYPE']
Input buffer: id ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S27
action: Shift state: 27，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 18, 27]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'VARIABLE_TYPE', 'id']
Input buffer: ; id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S38
action: Shift state: 38，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 18, 27, 38]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'VARIABLE_TYPE', 'id', ';']
Input buffer: id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r8
action: Reduce with No.8 production: ['VARIABLE_TYPE', 'id', ';'] -> FUNCTION_BLOCK, push state 17 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK']
Input buffer: id = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S19
action: Shift state: 19，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 19]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'id']
Input buffer: = digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S28
action: Shift state: 28，input character: =

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 19, 28]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'id', '=']
Input buffer: digit ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 19, 28, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'digit']
Input buffer: ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: ; float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S55
action: Shift state: 55，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 19, 28, 39, 55]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r9
action: Reduce with No.9 production: ['id', '=', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: float id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S5
action: Shift state: 5，input character: float

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 5]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'float']
Input buffer: id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r16
action: Reduce with No.16 production: ['float'] -> VARIABLE_TYPE, push state 18 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 18]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'VARIABLE_TYPE']
Input buffer: id ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S27
action: Shift state: 27，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 18, 27]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'VARIABLE_TYPE', 'id']
Input buffer: ; id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S38
action: Shift state: 38，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 18, 27, 38]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'VARIABLE_TYPE', 'id', ';']
Input buffer: id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r8
action: Reduce with No.8 production: ['VARIABLE_TYPE', 'id', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: id = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S19
action: Shift state: 19，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 19]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id']
Input buffer: = digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S28
action: Shift state: 28，input character: =

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 19, 28]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=']
Input buffer: digit ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 19, 28, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'digit']
Input buffer: ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: ; float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S55
action: Shift state: 55，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 19, 28, 39, 55]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r9
action: Reduce with No.9 production: ['id', '=', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: float id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S5
action: Shift state: 5，input character: float

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 5]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'float']
Input buffer: id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r16
action: Reduce with No.16 production: ['float'] -> VARIABLE_TYPE, push state 18 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 18]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'VARIABLE_TYPE']
Input buffer: id ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S27
action: Shift state: 27，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 18, 27]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'VARIABLE_TYPE', 'id']
Input buffer: ; id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S38
action: Shift state: 38，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 18, 27, 38]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'VARIABLE_TYPE', 'id', ';']
Input buffer: id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r8
action: Reduce with No.8 production: ['VARIABLE_TYPE', 'id', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: id = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S19
action: Shift state: 19，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 19]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id']
Input buffer: = digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S28
action: Shift state: 28，input character: =

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 19, 28]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=']
Input buffer: digit ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 19, 28, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'digit']
Input buffer: ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: ; while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S55
action: Shift state: 55，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 19, 28, 39, 55]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r9
action: Reduce with No.9 production: ['id', '=', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: while ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S20
action: Shift state: 20，input character: while

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while']
Input buffer: ( id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S29
action: Shift state: 29，input character: (

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(']
Input buffer: id <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 32]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'id']
Input buffer: <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 40 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 40]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'ARITHMETIC_EXPRESSION']
Input buffer: <= digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S59
action: Shift state: 59，input character: <=

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 40, 59]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'ARITHMETIC_EXPRESSION', '<=']
Input buffer: digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r31
action: Reduce with No.31 production: ['<='] -> COMPARISON_OPERATOR, push state 56 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 40, 56]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR']
Input buffer: digit ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 40, 56, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR', 'digit']
Input buffer: ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 72 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 40, 56, 72]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r22
action: Reduce with No.22 production: ['ARITHMETIC_EXPRESSION', 'COMPARISON_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> BOOL_EXPRESSION, push state 41 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION']
Input buffer: ) { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S63
action: Shift state: 63，input character: )

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')']
Input buffer: { id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S73
action: Shift state: 73，input character: {

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{']
Input buffer: id = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S19
action: Shift state: 19，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id']
Input buffer: = id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S28
action: Shift state: 28，input character: =

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=']
Input buffer: id + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 32]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'id']
Input buffer: + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: + digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S50
action: Shift state: 50，input character: +

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39, 50]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION', '+']
Input buffer: digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r35
action: Reduce with No.35 production: ['+'] -> ARITHMETIC_OPERATOR, push state 47 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39, 47]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR']
Input buffer: digit ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39, 47, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'digit']
Input buffer: ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r17
action: Reduce with No.17 production: ['ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: ; id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S55
action: Shift state: 55，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 19, 28, 39, 55]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'id', '=', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r9
action: Reduce with No.9 production: ['id', '=', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 78 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK']
Input buffer: id = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S19
action: Shift state: 19，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id']
Input buffer: = id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S28
action: Shift state: 28，input character: =

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=']
Input buffer: id * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 32]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'id']
Input buffer: * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: * id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S51
action: Shift state: 51，input character: *

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 51]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', '*']
Input buffer: id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r37
action: Reduce with No.37 production: ['*'] -> ARITHMETIC_OPERATOR, push state 47 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR']
Input buffer: id / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 32]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'id']
Input buffer: / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: / digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S52
action: Shift state: 52，input character: /

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 52]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', '/']
Input buffer: digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r38
action: Reduce with No.38 production: ['/'] -> ARITHMETIC_OPERATOR, push state 47 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR']
Input buffer: digit - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'digit']
Input buffer: - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: - digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S49
action: Shift state: 49，input character: -

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 70, 49]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', '-']
Input buffer: digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: r36
action: Reduce with No.36 production: ['-'] -> ARITHMETIC_OPERATOR, push state 47 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 70, 47]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR']
Input buffer: digit ; id = id + digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 70, 47, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'digit']
Input buffer: ; id = id + digit ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 70, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ; id = id + digit ; } return id ; } $ 
SLR(1) table: r17
action: Reduce with No.17 production: ['ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ; id = id + digit ; } return id ; } $ 
SLR(1) table: r17
action: Reduce with No.17 production: ['ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ; id = id + digit ; } return id ; } $ 
SLR(1) table: r17
action: Reduce with No.17 production: ['ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: ; id = id + digit ; } return id ; } $ 
SLR(1) table: S55
action: Shift state: 55，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 19, 28, 39, 55]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: id = id + digit ; } return id ; } $ 
SLR(1) table: r9
action: Reduce with No.9 production: ['id', '=', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: id = id + digit ; } return id ; } $ 
SLR(1) table: S19
action: Shift state: 19，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id']
Input buffer: = id + digit ; } return id ; } $ 
SLR(1) table: S28
action: Shift state: 28，input character: =

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=']
Input buffer: id + digit ; } return id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 32]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'id']
Input buffer: + digit ; } return id ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: + digit ; } return id ; } $ 
SLR(1) table: S50
action: Shift state: 50，input character: +

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39, 50]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', '+']
Input buffer: digit ; } return id ; } $ 
SLR(1) table: r35
action: Reduce with No.35 production: ['+'] -> ARITHMETIC_OPERATOR, push state 47 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39, 47]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR']
Input buffer: digit ; } return id ; } $ 
SLR(1) table: S36
action: Shift state: 36，input character: digit

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39, 47, 36]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'digit']
Input buffer: ; } return id ; } $ 
SLR(1) table: r21
action: Reduce with No.21 production: ['digit'] -> ARITHMETIC_EXPRESSION, push state 70 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39, 47, 70]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION']
Input buffer: ; } return id ; } $ 
SLR(1) table: r17
action: Reduce with No.17 production: ['ARITHMETIC_EXPRESSION', 'ARITHMETIC_OPERATOR', 'ARITHMETIC_EXPRESSION'] -> ARITHMETIC_EXPRESSION, push state 39 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION']
Input buffer: ; } return id ; } $ 
SLR(1) table: S55
action: Shift state: 55，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 19, 28, 39, 55]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'id', '=', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: } return id ; } $ 
SLR(1) table: r9
action: Reduce with No.9 production: ['id', '=', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } return id ; } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } return id ; } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 78 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK']
Input buffer: } return id ; } $ 
SLR(1) table: S80
action: Shift state: 80，input character: }

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 20, 29, 41, 63, 73, 78, 80]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}']
Input buffer: return id ; } $ 
SLR(1) table: r10
action: Reduce with No.10 production: ['while', '(', 'BOOL_EXPRESSION', ')', '{', 'FUNCTION_BLOCK', '}'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: return id ; } $ 
SLR(1) table: S22
action: Shift state: 22，input character: return

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25, 22]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'return']
Input buffer: id ; } $ 
SLR(1) table: S32
action: Shift state: 32，input character: id

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25, 22, 32]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'return', 'id']
Input buffer: ; } $ 
SLR(1) table: r20
action: Reduce with No.20 production: ['id'] -> ARITHMETIC_EXPRESSION, push state 31 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25, 22, 31]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'return', 'ARITHMETIC_EXPRESSION']
Input buffer: ; } $ 
SLR(1) table: S48
action: Shift state: 48，input character: ;

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25, 22, 31, 48]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'return', 'ARITHMETIC_EXPRESSION', ';']
Input buffer: } $ 
SLR(1) table: r14
action: Reduce with No.14 production: ['return', 'ARITHMETIC_EXPRESSION', ';'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 25 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 25]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: r7
action: Reduce with No.7 production: ['FUNCTION_BLOCK', 'FUNCTION_BLOCK'] -> FUNCTION_BLOCK, push state 17 into state stack

State stack: [0, 2, 3, 7, 8, 11, 14, 17]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK']
Input buffer: } $ 
SLR(1) table: S26
action: Shift state: 26，input character: }

State stack: [0, 2, 3, 7, 8, 11, 14, 17, 26]
Value stack: ['$', 'DEFINE_FUNCTION', 'VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', '}']
Input buffer: $ 
SLR(1) table: r3
action: Reduce with No.3 production: ['VARIABLE_TYPE', 'id', '(', ')', '{', 'FUNCTION_BLOCK', '}'] -> DEFINE_FUNCTION, push state 6 into state stack

State stack: [0, 2, 6]
Value stack: ['$', 'DEFINE_FUNCTION', 'DEFINE_FUNCTION']
Input buffer: $ 
SLR(1) table: r2
action: Reduce with No.2 production: ['DEFINE_FUNCTION', 'DEFINE_FUNCTION'] -> DEFINE_FUNCTION, push state 2 into state stack

State stack: [0, 2]
Value stack: ['$', 'DEFINE_FUNCTION']
Input buffer: $ 
SLR(1) table: r1
action: Reduce with No.1 production: ['DEFINE_FUNCTION'] -> PROGRAM, push state 1 into state stack

State stack: [0, 1]
Value stack: ['$', 'PROGRAM']
Input buffer: $ 
SLR(1) table: acc
action: Parsing succeeded.
