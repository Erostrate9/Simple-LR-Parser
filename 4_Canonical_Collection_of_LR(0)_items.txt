I(0):
PROGRAM' -> . PROGRAM 
PROGRAM -> . DEFINE_FUNCTION 
DEFINE_FUNCTION -> . DEFINE_FUNCTION DEFINE_FUNCTION 
DEFINE_FUNCTION -> . VARIABLE_TYPE id ( ) { FUNCTION_BLOCK } 
DEFINE_FUNCTION -> . VARIABLE_TYPE id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK } 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(1):
PROGRAM' -> PROGRAM .

I(2):
PROGRAM -> DEFINE_FUNCTION .
DEFINE_FUNCTION -> DEFINE_FUNCTION . DEFINE_FUNCTION 
DEFINE_FUNCTION -> . DEFINE_FUNCTION DEFINE_FUNCTION 
DEFINE_FUNCTION -> . VARIABLE_TYPE id ( ) { FUNCTION_BLOCK } 
DEFINE_FUNCTION -> . VARIABLE_TYPE id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK } 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(3):
DEFINE_FUNCTION -> VARIABLE_TYPE . id ( ) { FUNCTION_BLOCK } 
DEFINE_FUNCTION -> VARIABLE_TYPE . id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK } 

I(4):
VARIABLE_TYPE -> int .

I(5):
VARIABLE_TYPE -> float .

I(6):
DEFINE_FUNCTION -> DEFINE_FUNCTION DEFINE_FUNCTION .
DEFINE_FUNCTION -> DEFINE_FUNCTION . DEFINE_FUNCTION 
DEFINE_FUNCTION -> . DEFINE_FUNCTION DEFINE_FUNCTION 
DEFINE_FUNCTION -> . VARIABLE_TYPE id ( ) { FUNCTION_BLOCK } 
DEFINE_FUNCTION -> . VARIABLE_TYPE id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK } 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(7):
DEFINE_FUNCTION -> VARIABLE_TYPE id . ( ) { FUNCTION_BLOCK } 
DEFINE_FUNCTION -> VARIABLE_TYPE id . ( INCOMING_PARAMETER ) { FUNCTION_BLOCK } 

I(8):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( . ) { FUNCTION_BLOCK } 
DEFINE_FUNCTION -> VARIABLE_TYPE id ( . INCOMING_PARAMETER ) { FUNCTION_BLOCK } 
INCOMING_PARAMETER -> . VARIABLE_TYPE id 
INCOMING_PARAMETER -> . VARIABLE_TYPE id , INCOMING_PARAMETER 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(9):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( INCOMING_PARAMETER . ) { FUNCTION_BLOCK } 

I(10):
INCOMING_PARAMETER -> VARIABLE_TYPE . id 
INCOMING_PARAMETER -> VARIABLE_TYPE . id , INCOMING_PARAMETER 

I(11):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( ) . { FUNCTION_BLOCK } 

I(12):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( INCOMING_PARAMETER ) . { FUNCTION_BLOCK } 

I(13):
INCOMING_PARAMETER -> VARIABLE_TYPE id .
INCOMING_PARAMETER -> VARIABLE_TYPE id . , INCOMING_PARAMETER 

I(14):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( ) { . FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(15):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( INCOMING_PARAMETER ) { . FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(16):
INCOMING_PARAMETER -> VARIABLE_TYPE id , . INCOMING_PARAMETER 
INCOMING_PARAMETER -> . VARIABLE_TYPE id 
INCOMING_PARAMETER -> . VARIABLE_TYPE id , INCOMING_PARAMETER 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(17):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( ) { FUNCTION_BLOCK . } 
FUNCTION_BLOCK -> FUNCTION_BLOCK . FUNCTION_BLOCK 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(18):
FUNCTION_BLOCK -> VARIABLE_TYPE . id ; 

I(19):
FUNCTION_BLOCK -> id . = ARITHMETIC_EXPRESSION ; 

I(20):
FUNCTION_BLOCK -> while . ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 

I(21):
FUNCTION_BLOCK -> if . ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> if . ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 

I(22):
FUNCTION_BLOCK -> return . ; 
FUNCTION_BLOCK -> return . ARITHMETIC_EXPRESSION ; 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(23):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK . } 
FUNCTION_BLOCK -> FUNCTION_BLOCK . FUNCTION_BLOCK 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(24):
INCOMING_PARAMETER -> VARIABLE_TYPE id , INCOMING_PARAMETER .

I(25):
FUNCTION_BLOCK -> FUNCTION_BLOCK FUNCTION_BLOCK .
FUNCTION_BLOCK -> FUNCTION_BLOCK . FUNCTION_BLOCK 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(26):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( ) { FUNCTION_BLOCK } .

I(27):
FUNCTION_BLOCK -> VARIABLE_TYPE id . ; 

I(28):
FUNCTION_BLOCK -> id = . ARITHMETIC_EXPRESSION ; 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(29):
FUNCTION_BLOCK -> while ( . BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
BOOL_EXPRESSION -> . ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION && BOOL_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION || BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ! BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ( BOOL_EXPRESSION ) 
BOOL_EXPRESSION -> . true 
BOOL_EXPRESSION -> . false 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(30):
FUNCTION_BLOCK -> if ( . BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> if ( . BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
BOOL_EXPRESSION -> . ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION && BOOL_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION || BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ! BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ( BOOL_EXPRESSION ) 
BOOL_EXPRESSION -> . true 
BOOL_EXPRESSION -> . false 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(31):
FUNCTION_BLOCK -> return ARITHMETIC_EXPRESSION . ; 
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(32):
ARITHMETIC_EXPRESSION -> id .

I(33):
ARITHMETIC_EXPRESSION -> ( . ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(34):
FUNCTION_BLOCK -> return ; .

I(35):
ARITHMETIC_EXPRESSION -> - . ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(36):
ARITHMETIC_EXPRESSION -> digit .

I(37):
DEFINE_FUNCTION -> VARIABLE_TYPE id ( INCOMING_PARAMETER ) { FUNCTION_BLOCK } .

I(38):
FUNCTION_BLOCK -> VARIABLE_TYPE id ; .

I(39):
FUNCTION_BLOCK -> id = ARITHMETIC_EXPRESSION . ; 
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(40):
BOOL_EXPRESSION -> ARITHMETIC_EXPRESSION . COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
COMPARISON_OPERATOR -> . < 
COMPARISON_OPERATOR -> . > 
COMPARISON_OPERATOR -> . <= 
COMPARISON_OPERATOR -> . >= 
COMPARISON_OPERATOR -> . == 
COMPARISON_OPERATOR -> . != 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(41):
FUNCTION_BLOCK -> while ( BOOL_EXPRESSION . ) { FUNCTION_BLOCK } 
BOOL_EXPRESSION -> BOOL_EXPRESSION . && BOOL_EXPRESSION 
BOOL_EXPRESSION -> BOOL_EXPRESSION . || BOOL_EXPRESSION 

I(42):
BOOL_EXPRESSION -> ( . BOOL_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> ( . ARITHMETIC_EXPRESSION ) 
BOOL_EXPRESSION -> . ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION && BOOL_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION || BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ! BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ( BOOL_EXPRESSION ) 
BOOL_EXPRESSION -> . true 
BOOL_EXPRESSION -> . false 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(43):
BOOL_EXPRESSION -> ! . BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION && BOOL_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION || BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ! BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ( BOOL_EXPRESSION ) 
BOOL_EXPRESSION -> . true 
BOOL_EXPRESSION -> . false 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(44):
BOOL_EXPRESSION -> true .

I(45):
BOOL_EXPRESSION -> false .

I(46):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION . ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION . ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
BOOL_EXPRESSION -> BOOL_EXPRESSION . && BOOL_EXPRESSION 
BOOL_EXPRESSION -> BOOL_EXPRESSION . || BOOL_EXPRESSION 

I(47):
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR . ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(48):
FUNCTION_BLOCK -> return ARITHMETIC_EXPRESSION ; .

I(49):
ARITHMETIC_OPERATOR -> - .

I(50):
ARITHMETIC_OPERATOR -> + .

I(51):
ARITHMETIC_OPERATOR -> * .

I(52):
ARITHMETIC_OPERATOR -> / .

I(53):
ARITHMETIC_EXPRESSION -> ( ARITHMETIC_EXPRESSION . ) 
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(54):
ARITHMETIC_EXPRESSION -> - ARITHMETIC_EXPRESSION .
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(55):
FUNCTION_BLOCK -> id = ARITHMETIC_EXPRESSION ; .

I(56):
BOOL_EXPRESSION -> ARITHMETIC_EXPRESSION COMPARISON_OPERATOR . ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(57):
COMPARISON_OPERATOR -> < .

I(58):
COMPARISON_OPERATOR -> > .

I(59):
COMPARISON_OPERATOR -> <= .

I(60):
COMPARISON_OPERATOR -> >= .

I(61):
COMPARISON_OPERATOR -> == .

I(62):
COMPARISON_OPERATOR -> != .

I(63):
FUNCTION_BLOCK -> while ( BOOL_EXPRESSION ) . { FUNCTION_BLOCK } 

I(64):
BOOL_EXPRESSION -> BOOL_EXPRESSION && . BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION && BOOL_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION || BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ! BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ( BOOL_EXPRESSION ) 
BOOL_EXPRESSION -> . true 
BOOL_EXPRESSION -> . false 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(65):
BOOL_EXPRESSION -> BOOL_EXPRESSION || . BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION && BOOL_EXPRESSION 
BOOL_EXPRESSION -> . BOOL_EXPRESSION || BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ! BOOL_EXPRESSION 
BOOL_EXPRESSION -> . ( BOOL_EXPRESSION ) 
BOOL_EXPRESSION -> . true 
BOOL_EXPRESSION -> . false 
ARITHMETIC_EXPRESSION -> . ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . - ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> . ( ARITHMETIC_EXPRESSION ) 
ARITHMETIC_EXPRESSION -> . id 
ARITHMETIC_EXPRESSION -> . digit 

I(66):
ARITHMETIC_EXPRESSION -> ( ARITHMETIC_EXPRESSION . ) 
BOOL_EXPRESSION -> ARITHMETIC_EXPRESSION . COMPARISON_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
COMPARISON_OPERATOR -> . < 
COMPARISON_OPERATOR -> . > 
COMPARISON_OPERATOR -> . <= 
COMPARISON_OPERATOR -> . >= 
COMPARISON_OPERATOR -> . == 
COMPARISON_OPERATOR -> . != 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(67):
BOOL_EXPRESSION -> ( BOOL_EXPRESSION . ) 
BOOL_EXPRESSION -> BOOL_EXPRESSION . && BOOL_EXPRESSION 
BOOL_EXPRESSION -> BOOL_EXPRESSION . || BOOL_EXPRESSION 

I(68):
BOOL_EXPRESSION -> ! BOOL_EXPRESSION .
BOOL_EXPRESSION -> BOOL_EXPRESSION . && BOOL_EXPRESSION 
BOOL_EXPRESSION -> BOOL_EXPRESSION . || BOOL_EXPRESSION 

I(69):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) . { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) . { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 

I(70):
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION .
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(71):
ARITHMETIC_EXPRESSION -> ( ARITHMETIC_EXPRESSION ) .

I(72):
BOOL_EXPRESSION -> ARITHMETIC_EXPRESSION COMPARISON_OPERATOR ARITHMETIC_EXPRESSION .
ARITHMETIC_EXPRESSION -> ARITHMETIC_EXPRESSION . ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION 
ARITHMETIC_OPERATOR -> . + 
ARITHMETIC_OPERATOR -> . - 
ARITHMETIC_OPERATOR -> . * 
ARITHMETIC_OPERATOR -> . / 

I(73):
FUNCTION_BLOCK -> while ( BOOL_EXPRESSION ) { . FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(74):
BOOL_EXPRESSION -> BOOL_EXPRESSION && BOOL_EXPRESSION .
BOOL_EXPRESSION -> BOOL_EXPRESSION . && BOOL_EXPRESSION 
BOOL_EXPRESSION -> BOOL_EXPRESSION . || BOOL_EXPRESSION 

I(75):
BOOL_EXPRESSION -> BOOL_EXPRESSION || BOOL_EXPRESSION .
BOOL_EXPRESSION -> BOOL_EXPRESSION . && BOOL_EXPRESSION 
BOOL_EXPRESSION -> BOOL_EXPRESSION . || BOOL_EXPRESSION 

I(76):
BOOL_EXPRESSION -> ( BOOL_EXPRESSION ) .

I(77):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { . FUNCTION_BLOCK } 
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { . FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(78):
FUNCTION_BLOCK -> while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK . } 
FUNCTION_BLOCK -> FUNCTION_BLOCK . FUNCTION_BLOCK 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(79):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK . } 
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK . } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> FUNCTION_BLOCK . FUNCTION_BLOCK 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(80):
FUNCTION_BLOCK -> while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } .

I(81):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } .
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } . else { FUNCTION_BLOCK } 

I(82):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else . { FUNCTION_BLOCK } 

I(83):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { . FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(84):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK . } 
FUNCTION_BLOCK -> FUNCTION_BLOCK . FUNCTION_BLOCK 
FUNCTION_BLOCK -> . FUNCTION_BLOCK FUNCTION_BLOCK 
FUNCTION_BLOCK -> . VARIABLE_TYPE id ; 
FUNCTION_BLOCK -> . id = ARITHMETIC_EXPRESSION ; 
FUNCTION_BLOCK -> . while ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } 
FUNCTION_BLOCK -> . return ; 
FUNCTION_BLOCK -> . return ARITHMETIC_EXPRESSION ; 
VARIABLE_TYPE -> . int 
VARIABLE_TYPE -> . float 

I(85):
FUNCTION_BLOCK -> if ( BOOL_EXPRESSION ) { FUNCTION_BLOCK } else { FUNCTION_BLOCK } .

